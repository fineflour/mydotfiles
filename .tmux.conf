
##############################
#  _
# | |_ _ __ ___  _   ___  __
# | __| '_ ` _ \| | | \ \/ /
# | |_| | | | | | |_| |>  < 
#  \__|_| |_| |_|\__,_/_/\_\
#
#############################
#
# COPY AND PASTE
# http://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future
#
# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind -t vi-copy v begin-selection
bind -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
#
############################################################################
############################################################################
# Reset Prefix
############################################################################
unbind C-b
set -g prefix C-y
#bind-key a send-prefix # for nested tmux sessions

############################################################################
# Global options
############################################################################
# Free the original C-b prefix keybinding
# large history
set-option -g history-limit 10000

# colors
setw -g mode-bg black
set-option -g default-terminal "screen-256color" 
set-option -g pane-active-border-fg green

# utf8 support
set-window-option -g utf8 on


# basic settings
#set-window-option -g xterm-keys on # for vim
#set-window-option -g mode-keys vi # vi key
#set-window-option -g monitor-activity on
#set-window-option -g window-status-current-fg white
#setw -g window-status-current-attr reverse

# Cheers Nei on freenode
 set-window-option -g window-status-current-format "[#[fg=white]#I:#W#F#[fg=red]]"
 set -g visual-activity on
 set-window-option -g monitor-activity off
 set-window-option -g window-status-current-fg red
 set-window-option -g window-status-current-attr bright

# Automatically set window title
setw -g automatic-rename

# use mouse # More on mouse support http://floriancrouzat.net/2010/07/run-tmux-with-mouse-support-in-mac-os-x-terminal-app/
setw -g mode-mouse on
#setw -g mouse-resize-pane on
#set -g mouse-select-window on
set -g mouse-select-pane on
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# vi movement keys
# set-option -g status-keys vi

############################################################################
# Status Bar
############################################################################
set-option -g status-utf8 on
set-option -g status-justify right
set-option -g status-bg black # colour213 # pink
set-option -g status-fg cyan
set-option -g status-interval 5
set-option -g status-left-length 30
set-option -g status-left '#[fg=magenta]» #[fg=blue,bold]#T#[default]'
set-option -g status-right '#[fg=red,bold][[ #(git branch) branch ]] #[fg=cyan]»» #[fg=blue,bold]###S #[fg=magenta]%R %m-%d#(acpi | cut -d ',' -f 2)#[default]'
set-option -g visual-activity on

# Remove administrative debris (session name, hostname, time) in status bar
set -g status-left ''
set -g status-right ''

set -g status-utf8 on
set -g status off
bind -n C-s set-option -g status #Ctrl+s Combo

# left side
set -g status-left-length 50
set -g status-left  '#[fg=brightwhite][#S]#[fg=blue,bold] [#P]#[fg=blue,bold]#[default]'

# right side
# # 15% | 20 Nov 18:15
# # set -g status-right "#(battery -t -p) #[fg=black]| #[fg=yellow]%d %b %R"
set -g status-right " #(battery -t -p) #[fg=black]| #[fg=yellow]#(date '+%a, %b %d - %I:%M') "


### WINDOWS
#
set-option -g status-keys 'emacs'
## Set the base index for windows from 0 to 1
set -g base-index 1

# Titles (window number, program name, active (or not)
    set-option -g set-titles on
    set-option -g set-titles-string '#H:#S.#I.#P #W #T'


############################################################################
# Unbindings
############################################################################
#unbind [ # copy mode bound to escape key
    unbind j
    unbind C-b # unbind default leader key
    unbind '"' # unbind horizontal split
    unbind %   # unbind vertical split


############################################################################
# Bindings
############################################################################
# reload tmux conf
    bind r source-file ~/.tmux.conf

#bind Escape copy-mode

# new split in current pane (horizontal / vertical)
#bind-key - split-window -v # split pane horizontally
#bind-key \ split-window -h # split pane vertically

# ** Split Window
unbind & # unbind default binding for `split-window -h`
bind - split-window -v -c '#{pane_current_path}' # vertical split
bind \ split-window -h -c '#{pane_current_path}' # horizontal split

# use current path when creating new window
 bind c new-window -c '#{pane_current_path}'
 bind S command-prompt -p ssh: "new-window -n %1 'ssh %1'"
#

# list panes
bind Space list-panes

# break-pane
bind Enter break-pane

# join-pane [-dhv] [-l size | -p percentage] [-s src-pane]
# [-t:dst-window.dst-pane] (destination window (dot) destination pane
#                (alias: joinp)
#
#bind C-j command-prompt "joinp"
#bind C-j command-prompt "join-pane"
#bind-key j command-prompt "join-pane -s '%%'"
#bind-key j command-prompt "joinp -t:0"
    bind Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split

#previous pane
    bind -n C-up prev
    bind -n C-left prev

#next pane
    bind -n C-right next
    bind -n C-down next

############################################################################
# windows
############################################################################
set-window-option -g window-status-current-bg red
bind C-j previous-window
bind C-k next-window
bind C-a last-window # C-a C-a for last active window
bind A command-prompt "rename-window %%"
# By default, all windows in a session are constrained to the size of the 
# smallest client connected to that session, 
# even if both clients are looking at different windows. 
# It seems that in this particular case, Screen has the better default 
# where a window is only constrained in size if a smaller client 
# is actively looking at it.
setw -g aggressive-resize on

############################################################################
# panes
############################################################################
# Navigation ---------------------------------------------------------------
# use the vim motion keys to move between panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one
# maximize current pane
#bind z run 'cut -c3- ~/.tmux.conf | sh -s maximize_pane'

# Resizing ---------------------------------------------------------------
#bind C-h resize-pane -L
#bind C-j resize-pane -D
#bind C-k resize-pane -U
#bind C-l resize-pane -R
#
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# Finer pane resizing with arrows
 bind -n S-Left resize-pane -L 2
 bind -n S-Right resize-pane -R 2
 bind -n S-Down resize-pane -D 1
 bind -n S-Up resize-pane -U 1

 bind -n C-Left resize-pane -L 10
 bind -n C-Right resize-pane -R 10
 bind -n C-Down resize-pane -D 5
 bind -n C-Up resize-pane -U 5

# Break a pane out of a window (detached)
 bind-key b break-pan -d

# use vim motion keys while in copy mode
setw -g mode-keys vi

# Smart pane switching with awareness of vim splits
 is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
 bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
 bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
 bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
 bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
 bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"


############################################################################
# layouts
############################################################################
bind o select-layout "active-only"
bind M-- select-layout "even-vertical"
bind M-| select-layout "even-horizontal"
bind M-r rotate-window


############################################################################
#Pane Border Style
############################################################################
set -g pane-border-style fg=magenta
set -g pane-active-border-style fg=magenta
set -g pane-active-border-style bg=default

set -g pane-border-fg magenta
set -g pane-active-border-fg green
set -g pane-active-border-bg default

# focus on first window
#select-window -t 0


# TMUX ZOOM

# Prompted join-pane
bind-key j command-prompt -p "Join pane from: " "join-pane -h -s '%%'"

# Easily swap a pane (targeted by pane number) with the current pane
bind-key s display-panes\; command-prompt -p "pane #: " "swap-pane -t '%%'"


### SPECIAL FEATURES

# Shortcut for synchronize-panes toggle
bind C-s set-window-option synchronize-panes

# Quickly view system & process info in htop
bind h split-window -h "htop"

# Quickly edit todo list
bind t split-window -h "vim ~/todo.md"

# Quickly edit  a file in your wiki
bind w split-window -h -c ~/my-wiki "reattach-to-user-namespace vim +CtrlP"

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind -t vi-copy v begin-selection
bind -t vi-copy y copy-pipe 'reattach-to-user-namespace pbcopy'

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind -t vi-copy Enter copy-pipe 'reattach-to-user-namespace pbcopy'
